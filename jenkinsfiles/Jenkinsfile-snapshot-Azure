pipeline {
  agent any
  
  options {
    // This is required if you want to clean before build
    skipDefaultCheckout(true)
  }
  
  environment {
    PATH="/opt/liquibase/liquibase/:$PATH"
	LIQUIBASE_LICENSE_KEY = credentials('LIQUIBASE_KEY')
	LIQUIBASE_DEFAULTS_FILE="liquibase.linux.properties"
	ENVIRONMENT = "${params.ENVIRONMENT}"
  
    AZURE_SUBSCRIPTION_ID='a38e082e-9dfc-49dd-a5e8-9d13e908b010'
    AZURE_TENANT_ID='fd6a63a1-3f33-4f34-802a-06ae5ad2217a'
    AZURE_STORAGE_ACCOUNT='cssnapshots'
  }
  stages {
  
	stage('Workspace') {
		steps {
			
			script {
		      currentBuild.displayName = "#" +env.BUILD_NUMBER + " ${ENVIRONMENT}"
			}
			
			// Clean before build
			cleanWs() // This requires ws-cleanup plugin
					
			// We need to explicitly checkout from SCM here
			checkout scm
			echo "Building ${env.JOB_NAME}..."
		}  // end steps
	} // end stage

	stage('Liquibase Flow') {
		steps {
		
		echo "Environment: ${ENVIRONMENT}"
		
		withEnv(["URL_CREDENTIALID=LIQUIBASE_${ENVIRONMENT}_URL",]) {
		  withCredentials([string(credentialsId: "${URL_CREDENTIALID}", variable: 'LIQUIBASE_COMMAND_URL' )]) {
		  
		  withCredentials([string(credentialsId: "LIQUIBASE_USER", variable: 'LIQUIBASE_COMMAND_USERNAME' )]) {
			
		  withCredentials([string(credentialsId: "LIQUIBASE_PASSWORD", variable: 'LIQUIBASE_COMMAND_PASSWORD' )]) {
		  
		  withCredentials([string(credentialsId: "azuresp", passwordVariable: 'AZURE_CLIENT_SECRET', usernameVariable: 'AZURE_CLIENT_ID' )]) {
		  
			sh '''
				liquibase flow --flow-file=flows/liquibase-snapshot-azure.flowfile.yaml
			'''
			
          }  // Azure SP creds
		  }  // DB Password creds
		  }	 // DB Username creds		
		  } // DB URL creds
		} // DB URL environment
			
		} // end steps
	} // end stage

      post {
        success {
          withCredentials([usernamePassword(credentialsId: 'azuresp', 
                          passwordVariable: 'AZURE_CLIENT_SECRET', 
                          usernameVariable: 'AZURE_CLIENT_ID')]) {
            sh '''
              echo $container_name
              # Login to Azure with ServicePrincipal
              az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID
              # Set default subscription
              az account set --subscription $AZURE_SUBSCRIPTION_ID
              # Execute upload to Azure
			  az storage container create --account-name cssnapshots --name jenkins-snapshot --auth-mode login
              az storage blob upload-batch --destination jenkins-snapshot --source ./snapshots --account-name $AZURE_STORAGE_ACCOUNT --overwrite
              # Logout from Azure
              az logout
            '''
          }
        }
      }
    }
  }
}